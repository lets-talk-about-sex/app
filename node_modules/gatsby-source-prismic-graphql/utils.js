"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.qs = qs;
exports.registerResolvers = registerResolvers;
exports.getCookies = getCookies;
exports.PrismicLink = PrismicLink;
exports.componentResolver = exports.linkResolver = exports.typeName = exports.fieldName = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _prismicJavascript = _interopRequireDefault(require("prismic-javascript"));

var _apolloLinkHttp = require("apollo-link-http");

var _apolloLinkContext = require("apollo-link-context");

// @todo should this be configurable?
var fieldName = 'prismic';
exports.fieldName = fieldName;
var typeName = 'PRISMIC'; // keep link resolver function

exports.typeName = typeName;
var linkResolver;
exports.linkResolver = linkResolver;
var componentResolver;
exports.componentResolver = componentResolver;

function qs() {
  var qs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var delimiter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '&';
  return new Map(qs.split(delimiter).map(function (item) {
    var _item$split$map = item.split('=').map(function (part) {
      return decodeURIComponent(part.trim());
    }),
        _item$split$map2 = (0, _slicedToArray2.default)(_item$split$map, 2),
        key = _item$split$map2[0],
        value = _item$split$map2[1];

    return [key, value];
  }));
}

function registerResolvers(link, component) {
  exports.linkResolver = linkResolver = link;

  if (component) {
    exports.componentResolver = componentResolver = component;
  }
}

function getCookies() {
  return qs(document.cookie, ';');
}
/**
 * Apollo Link for Prismic
 * @param options Options
 */


function PrismicLink(_ref) {
  var uri = _ref.uri,
      accessToken = _ref.accessToken,
      rest = (0, _objectWithoutProperties2.default)(_ref, ["uri", "accessToken"]);
  var BaseURIReg = /^(https?:\/\/.+?\..+?\..+?)\/graphql\/?$/;
  var matches = uri.match(BaseURIReg);

  if (matches && matches[1]) {
    var prismicClient = _prismicJavascript.default.client("".concat(matches[1], "/api"), {
      accessToken: accessToken
    });

    var prismicLink = (0, _apolloLinkContext.setContext)(
    /*#__PURE__*/
    function () {
      var _ref2 = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(request, options) {
        var prismicRef, cookies, api, authorizationHeader;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (typeof window !== 'undefined' && document.cookie) {
                  cookies = getCookies();

                  if (cookies.has(_prismicJavascript.default.experimentCookie)) {
                    prismicRef = cookies.get(_prismicJavascript.default.experimentCookie);
                  } else if (cookies.has(_prismicJavascript.default.previewCookie)) {
                    prismicRef = cookies.get(_prismicJavascript.default.previewCookie);
                  }
                }

                if (prismicRef) {
                  _context.next = 6;
                  break;
                }

                _context.next = 4;
                return prismicClient.getApi();

              case 4:
                api = _context.sent;
                prismicRef = api.masterRef.ref;

              case 6:
                authorizationHeader = accessToken ? {
                  Authorization: "Token ".concat(accessToken)
                } : {};
                return _context.abrupt("return", {
                  headers: (0, _objectSpread2.default)({}, options.headers, authorizationHeader, {
                    'Prismic-ref': prismicRef
                  })
                });

              case 8:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function (_x, _x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    var httpLink = new _apolloLinkHttp.HttpLink((0, _objectSpread2.default)({
      uri: uri,
      useGETForQueries: true
    }, rest));
    return prismicLink.concat(httpLink);
  } else {
    throw new Error("".concat(uri, " isn't a valid Prismic GraphQL endpoint"));
  }
}