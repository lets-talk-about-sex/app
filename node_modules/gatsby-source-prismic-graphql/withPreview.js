"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.withPreview = withPreview;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread"));

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _apolloCacheInmemory = require("apollo-cache-inmemory");

var _apolloBoost = require("apollo-boost");

var _prismicJavascript = _interopRequireDefault(require("prismic-javascript"));

var _gatsbySourceGraphqlUniversal = require("gatsby-source-graphql-universal");

var _lodash = require("lodash");

var _utils = require("./utils");

var client = undefined;

var getClient = function getClient() {
  if (!client) {
    var repositoryName = '';

    if (typeof window !== 'undefined') {
      var registry = window.___sourcePrismicGraphql;

      if (registry.repositoryName) {
        repositoryName = registry.repositoryName;
      }
    }

    client = new _apolloBoost.ApolloClient({
      cache: new _apolloCacheInmemory.InMemoryCache(),
      link: (0, _utils.PrismicLink)({
        uri: "https://".concat(repositoryName, ".prismic.io/graphql"),
        credentials: 'same-origin'
      })
    });
  }

  return client;
};

function withPreview(ComposedComponent, query) {
  var _temp;

  return _temp =
  /*#__PURE__*/
  function (_React$Component) {
    (0, _inherits2.default)(_temp, _React$Component);

    function _temp() {
      var _getPrototypeOf2;

      var _this;

      (0, _classCallCheck2.default)(this, _temp);

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      _this = (0, _possibleConstructorReturn2.default)(this, (_getPrototypeOf2 = (0, _getPrototypeOf3.default)(_temp)).call.apply(_getPrototypeOf2, [this].concat(args)));
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "state", {
        // proxy data to state
        data: _this.props.data,
        loading: false,
        error: null
      });
      (0, _defineProperty2.default)((0, _assertThisInitialized2.default)((0, _assertThisInitialized2.default)(_this)), "load",
      /*#__PURE__*/
      (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee() {
        var variables,
            client,
            res,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                variables = _args.length > 0 && _args[0] !== undefined ? _args[0] : _this.props.pageContext;
                client = getClient();
                _context.prev = 2;

                _this.setState({
                  loading: true,
                  error: false
                });

                _context.next = 6;
                return client.query({
                  query: (0, _gatsbySourceGraphqlUniversal.getIsolatedQuery)(query, _utils.fieldName, _utils.typeName),
                  fetchPolicy: 'network-only',
                  variables: variables
                });

              case 6:
                res = _context.sent;

                if (!res.errors && res.data) {
                  _this.setState({
                    loading: false,
                    data: (0, _lodash.merge)(_this.state.data, (0, _defineProperty2.default)({}, _utils.fieldName, res.data))
                  });
                } else {
                  _this.setState({
                    error: res.errors,
                    loading: false
                  });
                }

                _context.next = 13;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](2);
                console.error('Failed to fetch preview', _context.t0);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[2, 10]]);
      })));
      return _this;
    }

    (0, _createClass2.default)(_temp, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        if (typeof window !== 'undefined' && document.cookie) {
          var cookies = (0, _utils.getCookies)();

          if (cookies.has(_prismicJavascript.default.experimentCookie) || cookies.has(_prismicJavascript.default.previewCookie)) {
            this.load();
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var prismic = {
          loading: this.state.loading,
          error: this.state.error,
          load: this.load
        };

        if (!ComposedComponent) {
          return _react.default.cloneElement(this.props.children, (0, _objectSpread2.default)({}, this.props, {
            prismic: prismic,
            data: this.state.data
          }));
        }

        return _react.default.createElement(ComposedComponent, (0, _extends2.default)({}, this.props, {
          prismic: prismic,
          data: this.state.data
        }));
      }
    }]);
    return _temp;
  }(_react.default.Component), _temp;
}