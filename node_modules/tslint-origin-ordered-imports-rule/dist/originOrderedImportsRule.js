"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __makeTemplateObject = (this && this.__makeTemplateObject) || function (cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};
Object.defineProperty(exports, "__esModule", { value: true });
var ts = require("typescript");
var Lint = require("tslint");
var tsutils = require("tsutils");
var utils_1 = require("./utils");
var BlankLinesOption;
(function (BlankLinesOption) {
    BlankLinesOption["anyNumber"] = "any-number-of-blank-lines";
    BlankLinesOption["no"] = "no-blank-lines";
    BlankLinesOption["one"] = "one-blank-line";
    BlankLinesOption["atLeastOne"] = "at-least-one-blank-line";
})(BlankLinesOption || (BlankLinesOption = {}));
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new OriginOrderedImportWalker(sourceFile, this.ruleName, { blankLines: this.blankLines }));
    };
    Object.defineProperty(Rule.prototype, "blankLines", {
        get: function () {
            if (this.ruleArguments[0] !== undefined) {
                return this.ruleArguments[0];
            }
            return BlankLinesOption.anyNumber;
        },
        enumerable: true,
        configurable: true
    });
    Rule.metadata = {
        ruleName: 'origin-ordered-imports',
        description: 'Strict order of imports (node_modules imports should be higher than custom imports).',
        rationale: 'Helps maintain a readable style in your codebase.',
        optionsDescription: Lint.Utils.dedent(templateObject_1 || (templateObject_1 = __makeTemplateObject(["\n            You can require having a blank line between node_modules and custom imports.\n            It's `", "` by default, you can use next options: ", "\n        "], ["\n            You can require having a blank line between node_modules and custom imports.\n            It's \\`", "\\` by default, you can use next options: ", "\n        "])), BlankLinesOption.anyNumber, utils_1.values(BlankLinesOption).map(function (_) { return "`" + _ + "`"; }).join(', ')),
        options: {
            type: 'string',
            enum: utils_1.values(BlankLinesOption)
        },
        optionExamples: [[true], [true, "one-blank-line"]],
        type: 'typescript',
        typescriptOnly: false,
        hasFix: false
    };
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var SourceType;
(function (SourceType) {
    SourceType[SourceType["USER"] = 0] = "USER";
    SourceType[SourceType["LIB"] = 1] = "LIB";
})(SourceType || (SourceType = {}));
var flowRules = (_a = {},
    _a[SourceType.LIB] = [SourceType.USER, SourceType.LIB],
    _a[SourceType.USER] = [SourceType.USER],
    _a);
var anyImportSyntaxKind = new Set([ts.SyntaxKind.ImportDeclaration, ts.SyntaxKind.ImportEqualsDeclaration]);
var OriginOrderedImportWalker = /** @class */ (function (_super) {
    __extends(OriginOrderedImportWalker, _super);
    function OriginOrderedImportWalker() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.nextSourceTypeMayBe = flowRules[SourceType.LIB];
        return _this;
    }
    OriginOrderedImportWalker.prototype.walk = function (sourceFile) {
        var _this = this;
        var cb = function (node) {
            if (node.kind === ts.SyntaxKind.ImportDeclaration) {
                _this.visitImportDeclaration(node);
            }
            if (node.kind === ts.SyntaxKind.ImportEqualsDeclaration) {
                _this.visitImportEqualsDeclaration(node);
            }
            return ts.forEachChild(node, cb);
        };
        return ts.forEachChild(sourceFile, cb);
    };
    /**
     * For expressions like: import { A, B } from 'foo'
     */
    OriginOrderedImportWalker.prototype.visitImportDeclaration = function (node) {
        this.check(node, this.getModuleName(node));
    };
    /**
     * For expressions like: import foo = require('foo')
     */
    OriginOrderedImportWalker.prototype.visitImportEqualsDeclaration = function (node) {
        this.check(node, this.getModuleName(node));
    };
    OriginOrderedImportWalker.prototype.getModuleName = function (node) {
        if (node.kind === ts.SyntaxKind.ImportDeclaration) {
            return this.removeQuotes(node.moduleSpecifier.getText());
        }
        if (node.moduleReference.kind === ts.SyntaxKind.ExternalModuleReference) {
            var moduleRef = node.moduleReference;
            if (moduleRef.expression.kind === ts.SyntaxKind.StringLiteral) {
                return this.removeQuotes(moduleRef.expression.text);
            }
        }
        return this.removeQuotes(node.moduleReference.getText());
    };
    OriginOrderedImportWalker.prototype.check = function (node, source) {
        var sourceType = this.getSourceType(source);
        this.checkOrder(node, sourceType);
        if (this.options.blankLines !== BlankLinesOption.anyNumber) {
            this.checkEmptyLine(node, sourceType);
        }
    };
    OriginOrderedImportWalker.prototype.checkOrder = function (node, sourceType) {
        if (this.nextSourceTypeMayBe.indexOf(sourceType) === -1) {
            this.addFailureAtNode(node, 'Import of node_modules must be higher than custom import.');
        }
        else {
            this.nextSourceTypeMayBe = flowRules[sourceType];
        }
    };
    OriginOrderedImportWalker.prototype.checkEmptyLine = function (node, sourceType) {
        if (sourceType === SourceType.USER) {
            return;
        }
        var nodeLine = ts
            .getLineAndCharacterOfPosition(this.getSourceFile(), node.getEnd())
            .line;
        var nextNode = tsutils.getNextStatement(node);
        if (!nextNode || !anyImportSyntaxKind.has(nextNode.kind)) {
            return;
        }
        var nextSourceType = this.getSourceType(this.getModuleName(nextNode));
        if (nextSourceType === SourceType.LIB) {
            return;
        }
        var nextNodeLine = ts
            .getLineAndCharacterOfPosition(this.getSourceFile(), nextNode.getStart(this.getSourceFile()))
            .line;
        var totalLinesCountBetweenNodes = nextNodeLine - nodeLine - 1;
        var blankLinesCount = totalLinesCountBetweenNodes - this.getNodeLeadingCommentedLinesCount(nextNode);
        var failed = false;
        var whyFailed = '';
        switch (this.options.blankLines) {
            case BlankLinesOption.one:
                failed = blankLinesCount !== 1;
                whyFailed = 'One blank line required between node_modules import and custom import';
                break;
            case BlankLinesOption.no:
                failed = blankLinesCount !== 0;
                whyFailed = 'Blank lines between node_modules import and custom import';
                break;
            case BlankLinesOption.atLeastOne:
                failed = blankLinesCount === 0;
                whyFailed = 'At least one blank line required between node_modules import and custom import';
        }
        if (failed) {
            this.addFailureAtNode(node, whyFailed);
        }
    };
    OriginOrderedImportWalker.prototype.getNodeLeadingCommentedLinesCount = function (node) {
        var _this = this;
        var comments = ts.getLeadingCommentRanges(this.getSourceFile().text, node.pos);
        if (!comments)
            return 0;
        return comments
            .reduce(function (count, comment) {
            var startLine = ts.getLineAndCharacterOfPosition(_this.getSourceFile(), comment.pos).line;
            var endLine = ts.getLineAndCharacterOfPosition(_this.getSourceFile(), comment.end).line;
            return count + (endLine - startLine + 1);
        }, 0);
    };
    OriginOrderedImportWalker.prototype.getSourceType = function (source) {
        return source.trim().charAt(0) === '.'
            ? SourceType.USER
            : SourceType.LIB;
    };
    OriginOrderedImportWalker.prototype.removeQuotes = function (value) {
        if (value && value.length > 1 && (value[0] === "'" || value[0] === "\"")) {
            value = value.substr(1, value.length - 2);
        }
        return value;
    };
    return OriginOrderedImportWalker;
}(Lint.AbstractWalker));
var templateObject_1;
var _a;
//# sourceMappingURL=/Users/marcuzy/code/github/tslint-origin-ordered-imports-rule/dist/originOrderedImportsRule.js.map